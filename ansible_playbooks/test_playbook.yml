---
- name: Update system packages # Play to update the system packages
  hosts: all
  become: yes  # To run tasks with sudo

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes

    # - name: Upgrade all packages
    #   apt:
    #     upgrade: dist
    #     update_cache: yes


- name: Install Apache HTTP Server # Play to install Apache HTTP Server
  hosts: all
  become: true

  tasks:
    - name: Install Apache HTTP Server
      apt:
        name: apache2
        state: present

    - name: Start Apache service
      service:
        name: apache2
        state: started
        enabled: yes

- name: Install containerd  # Play to install containerd directrly from github release
  hosts: all
  become: true

  tasks:
    - name: Download containerd archive
      become: true
      ansible.builtin.get_url:
        url: https://github.com/containerd/containerd/releases/download/v1.7.8/containerd-1.7.8-linux-amd64.tar.gz
        dest: /tmp/containerd-1.7.8-linux-amd64.tar.gz

    - name: Extract containerd archive
      become: true
      ansible.builtin.unarchive:
        src: /tmp/containerd-1.7.8-linux-amd64.tar.gz
        dest: /usr/local
        remote_src: true

    - name: Install systemd unit file for containerd
      become: true
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /etc/systemd/system/containerd.service

    - name: Reload systemd
      become: true
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start containerd service
      become: true
      ansible.builtin.service:
        name: containerd
        state: started
        enabled: yes

    - name: Clean up downloaded archive
      become: true
      ansible.builtin.file:
        path: /tmp/containerd-1.7.8-linux-amd64.tar.gz
        state: absent
      register: cleanup_archive

    - name: Show cleanup task result
      ansible.builtin.debug:
        var: cleanup_archive

- name: Install CNI plugins # (required for most pod network)
  hosts: all
  become: true
  vars:
    CNI_PLUGINS_VERSION: 'v1.3.0'
    ARCH: 'amd64'
    CNI_PLUGINS_DEST: '/opt/cni/bin'

  tasks:
    - name: Create /opt/cni/bin directoty if not exists
      file:
        path: "{{ CNI_PLUGINS_DEST }}"
        state: directory

    - name: Download CNI plugins archive
      get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/{{ CNI_PLUGINS_VERSION }}/cni-plugins-linux-{{ ARCH }}-{{ CNI_PLUGINS_VERSION }}.tgz"
        dest: "/tmp/cni-plugins.tgz"

    - name: Extract CNI plugins
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins.tgz"
        dest: "{{ CNI_PLUGINS_DEST }}"
        remote_src: yes
        extra_opts: --strip-components=1

    - name: Clean up downloaded archive /tmp/cni-plugins.tgz
      become: true
      ansible.builtin.file:
        path: /tmp/cni-plugins.tgz
        state: absent
      register: cleanup_archive

- name: Install Kubelet, Kubectl, Kubeadm and add a kubelet systemd service
  hosts: all
  become: true
  vars:
    CRICTL_VERSION: 'v1.28.0'
    K8S_BIN_INSTALL_DIR: '/usr/local/bin'
    ARCH: 'amd64'
    TEMP_DIR: '/tmp'

  tasks:
    - name: Create K8S_BIN_INSTALL_DIR directory for installation
      file:
        path: "{{ K8S_BIN_INSTALL_DIR }}"
        state: directory

    - name: Download crictl to temporary directory
      get_url:
        url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ CRICTL_VERSION }}/crictl-{{ CRICTL_VERSION }}-linux-{{ ARCH }}.tar.gz"
        dest: "{{ TEMP_DIR }}/crictl-{{ CRICTL_VERSION }}-linux-{{ ARCH }}.tar.gz"

    - name: Extract crictl to the installation directory
      ansible.builtin.unarchive:
        src: "{{ TEMP_DIR }}/crictl-{{ CRICTL_VERSION }}-linux-{{ ARCH }}.tar.gz"
        dest: "{{ K8S_BIN_INSTALL_DIR }}"
        remote_src: yes

    - name: Clean up downloaded archive from the temporary directory
      become: true
      ansible.builtin.file:
        path: "{{ TEMP_DIR }}/crictl-{{ CRICTL_VERSION }}-linux-{{ ARCH }}.tar.gz"
        state: absent
      register: cleanup_archive

    - name: Retrieve Kubernetes stable release version
      uri:
        url: "https://dl.k8s.io/release/stable.txt"
        return_content: yes
      register: release_content

    - set_fact:
        K8S_RELEASE_VERSION: "{{ release_content.content | regex_replace('^(.*)$', '\\1') }}"

    - name: Download Kubernetes binaries to the installation directory and set permissions 0755
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/{{ K8S_RELEASE_VERSION }}/bin/linux/{{ ARCH }}/{{ item }}"
        dest: "{{ K8S_BIN_INSTALL_DIR }}/{{ item }}"
        mode: '0755'
      loop:
        - kubeadm
        - kubelet
